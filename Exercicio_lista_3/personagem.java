/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import javax.swing.JOptionPane;

/**
 *
 * @author Edu
 */
public class criarpersonagem extends javax.swing.JFrame {

    /**
     * Creates new form criarpersonagem
     */
    public criarpersonagem() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nome = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tipo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Escolha um nome:");

        nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeActionPerformed(evt);
            }
        });

        jLabel4.setText("Tipo:");

        tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoActionPerformed(evt);
            }
        });

        jButton1.setText("Jogar !");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tipo)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(nome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/46988_Papel-de-Parede-Jogo--46988_1280x1024.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(89, 89, 89))
        );

        pack();
    }// </editor-fold>                        

    private void nomeActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if(nome.getText().length()!=0&&tipo.getText().length()!=0){
            blueWarrior objt = new blueWarrior(nome.getText(),tipo.getText(),10,10,10);
            objt.mostraInfo();
        }else{
            JOptionPane.showMessageDialog(null, "Nome e/ou tipo vazio(s)!");
        }
    }                                        

    private void tipoActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(criarpersonagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(criarpersonagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(criarpersonagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(criarpersonagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new criarpersonagem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField nome;
    private javax.swing.JTextField tipo;
    // End of variables declaration                   
}
abstract class character {

    //Atributos dos personagens
    private String name; //Name of character
    private String tipo; //type of player
    private int vida;
    private int attack;  //Value of attack
    private int defense;  //Value of defense

    character(String Name, String Tipo, int Vida, int Attack, int Defense) {
        this.name = Name;
        this.tipo = Tipo;
        this.vida = Vida;
        this.attack = Attack;
        this.defense = Defense;
    }

    //Metodos Set
    public void setName(String Name) {
        this.name = Name;
    }

    public void setTipo(String Tipo) {
        this.tipo = Tipo;
    }

    public void setVida(int Vida) {
        this.vida = Vida;
    }

    public void setAttack(int Attack) {
        this.attack = Attack;
    }

    public void setDefense(int Defense) {
        this.defense = Defense;
    }

    //Metodos Get
    public String getName() {
        return this.name;
    }

    public String getTipo() {
        return this.tipo;
    }

    public int getVida() {
        return this.vida;
    }

    public int getAttack() {
        return this.attack;
    }

    public int getDefense() {
        return this.defense;
    }

    public void mostraInfo() {

        JOptionPane.showMessageDialog(null, "Nome: " + this.getName() + "\n"
                + "Tipo: " + this.tipo + "\n"
                + "Vida: " + this.vida + "\n"
                + "Ataque: " + this.getAttack() + "\n"
                + "Defesa: " + this.getDefense() + "\n");

        /*System.out.println("Nome: "+this.getName());
		System.out.println("Tipo: "+this.tipo);
		System.out.println("Ataque: "+this.getAttack());
		System.out.println("Defesa: "+this.getDefense());*/
    }

}

//Class abstract of warrior
abstract class Warrior extends character {


    Warrior(String Name, String Tipo, int Vida, int Attack, int Defense) {
        super(Name, Tipo, Vida, Attack, Defense);
    }

    public void attackWarrior(character Monster1) {

        if (Monster1.getDefense() < this.getAttack()) {
            //System.out.println("O guerreiro venceu!!!");
            JOptionPane.showMessageDialog(null, "O guerreiro venceu!!!");
            super.setVida(super.getVida() + 10);
            super.setAttack(super.getAttack() + 10);
            super.setDefense(super.getDefense() + 5);
        } else if (Monster1.getDefense() > this.getAttack() && this.getDefense() < Monster1.getAttack()) {
            //System.out.println("O guerreiro morreu :(...");
            JOptionPane.showMessageDialog(null, "O guerreiro morreu :(");
            super.setVida(0);
        } else {
            JOptionPane.showMessageDialog(null, "Empate, aceitem as diferencas...");
        } /*if(Monster1.getAttack()<this.getAttack()){
					System.out.println("O guerreiro venceu!!!");
					super.setAttack(super.getAttack()+10);
					super.setDefense(super.getDefense()+5);
				}
				else{
					System.out.println("O guerreiro morreu :(...");
			}*/
    }
}

//Class abstract of Monsters
abstract class Monster extends character {

    //Attributes of Monsters

    Monster(String Name, String Tipo, int Vida, int Attack, int Defense) {
        super(Name, Tipo, Vida, Attack, Defense);
    }

    public void attackMonster(character Warrior1) {

        if (Warrior1.getDefense() < this.getAttack()) {
            System.out.println("O mosntro venceu!!!");
        } else {

            if (Warrior1.getDefense() > this.getAttack()) {
                System.out.println("O monstro morreu :(...");
            }

            if (Warrior1.getDefense() == this.getAttack()) {
                if (Warrior1.getAttack() < this.getAttack()) {
                    System.out.println("O monstro venceu!!!");
                } else {
                    System.out.println("O monstro morreu :(...");
                }
            }

        }

    }
}

//Interface habilidade Fogo
interface habilidadeFogo {

    public abstract void habilidade_fogo();
}

//Interface habilidade Vida
interface habilidadeVida {

    public abstract void habilidade_vida();
}

//Criando as classes que serão instanciadas
class blueWarrior extends Warrior implements habilidadeVida {

    blueWarrior(String Name, String Tipo, int Vida, int Attack, int Defense) {
        super(Name, Tipo, Vida, Attack, Defense);
    }

    public void golpe() {
        System.out.println("Chute!");
    }

    @Override
    public void habilidade_vida() {
        System.out.println("Habilidade Vida!!!");
    }

}

class redWarrior extends Warrior implements habilidadeFogo {

    redWarrior(String Name, String Tipo, int Vida, int Attack, int Defense) {
        super(Name, Tipo, Vida, Attack, Defense);
    }

    public void golpe() {
        System.out.println("Soco!");
    }

    @Override
    public void habilidade_fogo() {
        System.out.println("Habilidade Fogo!");
    }
}

class dragao extends Monster implements habilidadeFogo {

    dragao(String Name, String Tipo, int Vida, int Attack, int Defense) {
        super(Name, Tipo, Vida, Attack, Defense);
    }

    public void golpe() {
        System.out.println("Golpe com Calda!!!");
    }

    @Override
    public void habilidade_fogo() {
        System.out.println("Habilidade Fogo!");
    }

}

class zumbi extends Monster implements habilidadeVida {

    zumbi(String Name, String Tipo, int Vida, int Attack, int Defense) {
        super(Name, Tipo, Vida, Attack, Defense);
    }

    public void golpe() {
        System.out.println("Reviver!!!");
    }

    @Override
    public void habilidade_vida() {
        System.out.println("Habilidade Vida!!!");
    }

}

class gigante extends Monster {

    gigante(String Name, String Tipo, int Vida, int Attack, int Defense) {
        super(Name, Tipo, Vida, Attack, Defense);
    }

    public void golpe() {
        System.out.println("Pisar!!!");
    }
}
